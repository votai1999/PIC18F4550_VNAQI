#include <18F4550.h> 

#device PASS_STRINGS = IN_RAM    
#DEVICE ADC=8                 
#fuses HSPLL,MCLR,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN                 
#use delay(clock=48000000)      
//#use rs232(FORCE_SW,baud=9600,parity=N,xmit=PIN_E0,rcv=PIN_E1,bits=8,stream=DEBUG,errors)//su dung uart mem     
//#use rs232(UART1,baud=9600,parity=N,bits=8,stream=DEBUG,errors)//su dung uart mem
#use rs232(baud=9600,parity=N,xmit=PIN_D2,rcv=PIN_D3,bits=8,stream=UART2)
#define ledv  PIN_C2                                                     
#define ledr  PIN_C1
#define ledon output_low                                      
#define ledoff output_high                     
#define led_on output_low                                                      
#define led_off output_high                                                       
#define DS1820_DATAPIN  PIN_B3             
#include ".\_inc\types.h"
#include ".\_inc\DS1307.c"


//#include ".\_lib\ds1820.h" 
//#include ".\_thuvien\mmcsdmod.c"  
//#include ".\_thuvien\fatmod.c"
       

#include <stdlib.h> // for atoi32             
                                                            

#include <mmcsd.c>
                             
//FAT library.                                                    
#include <fat.c>

//////////////////////                                           
///                ///
/// Useful Defines ///
///                ///
//////////////////////

#define COMMAND_SIZE 10                                                 
#define NUM_COMMANDS 11

////////////////////////
///                  ///
/// Global Variables ///
///                  ///                                                                                                                                                          
////////////////////////

char g_CWD[10] = "/"; //current working directory



sint16 temperature_raw;     
float temperature_float;
char temperature[8];        
//uint8 sensor_count; 
BYTE sec; 
BYTE min; 
BYTE hrs; 
BYTE day; 
BYTE month; 
BYTE yr; 
BYTE dow; 
char Buffer_time[13];
int8 Hour,Min,Sec,Day, Mon, Year;
int8 CharRec  = 0;
int1 ComRec;
float nhietdo = 99, doam=99;
char bufferTP[255];  
char buff_date[15]; 
char buff_time[15];
char gfilename[15];
char gfileopen[15];
void AppendFile(char *fileName, char *appendString);
void MakeFile(char *fileName);
////////////////////////////////
//                            //
// LAY BEN CODE SIM 900       //
////////////////////////////////

/* Danh cho sim 900*/

#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1SIM)
#use rs232(baud=9600,parity=N,xmit=PIN_C5,rcv=PIN_C4,bits=8,stream=PORT2CBSA) // thiet lap UART mem C5 tx, c4 rx
#define buffer_size 100 //Buffer size you can adjust this size
#define buff2_size 100
long hienthims(int1 i);
//cac bien
//unsigned char ma_led_7seg[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};    //mã led Anode chung
char c, mag[30], result[20], buffer[buffer_size], buff[buff2_size], *toInt, *ptr; // SAVE Response 
char rsensor; // gia tri cam bien
int xbuff=0x00, xbuff2, count =0,i, answer = 0,kt=0,x,gg, kiemtraread=0; //
float tachdata[10];
//Chuong trinh ngat UART
#INT_RDA

void RDA_isr()
{

   c=fgetc(PORT1SIM);
   buffer[xbuff]=c;
   if (c =='*')
   {
      kt =1;
      xbuff2 =0;
      for ( i =0; i<buff2_size;i++)
      {
         buff[i] = 0x00;
      }
   }
   else if 
   (c=='#'){
      kt =0;

   }
   if (kt ==1)
   {
      buff[xbuff2] = c;
      xbuff2 ++;
   }
   xbuff++;


}

// Chuong trinh ngat timer 0
#INT_RTCC

void  ngat_timer0()
{
   set_timer0(1);//dem tu 1 tro di
   count++;

   if(count==20)
   {
      //dinh thoi 20*0.0512*(2^16)=67100ms-hon 1 phut,muon nhieu hon thi thay 20 thanh so khac
      
      count=0;
   }
}

void erase_buffer()
{
   int i;
   for(i=0;i<buffer_size;i++){ buffer[i]=0x00;}
   xbuff=0x00;
    
   return;
}

int sendATcommand(char *command, char *expected_answer, long mstimeout)
{
   int answer=0;
   //CHAR*ATcommand="this is a test";
   //delay_ms(500);
   xbuff=0;
   erase_buffer();
   delay_ms(100);//Delay to be sure no passed commands interfere
   fprintf(PORT1SIM,command);
   fputc(13,PORT1SIM);
   fputc(10,PORT1SIM);
   delay_ms(100);

   hienthims(0);

   do
   {
      if(strstr(buffer,expected_answer)!=NULL)
      {
         answer=1;
      }

      else answer=0;
   }

   while((answer==0)&&(hienthims(1)<mstimeout));

   return answer;
}
void timer0_config()
{
   //Cau Hinh Timer 0//
   //setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit);//T_tm0=T_osc*4*64
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256);//T_tm0=T_osc*4*256,chuyen qua 8bit tran thi them RTCC_8_bit
   //setup_timer_0(RTCC_EXT_L_TO_H|RTCC_DIV_256|RTCC_8_bit);//Tang gia tri timer0 len 1 khi co 256 xung len tai chan PIN_A4(T0CKI)
   //setup_timer_0(RTCC_EXT_H_TO_L|RTCC_DIV_64|RTCC_8_bit);//Tang gia tri timer0 len 1 khi co 64 suon xuong tai chan PIN_A4(T0CKI)
   /******************Thiet lap ngat timer*********************/
   enable_interrupts(INT_TIMER0);//Cho phep ngat tran timer0 hoat dong
   //disable_interrupts(INT_TIMER0);//Khong cho phep ngat tran timer0 hoat dong(mac dinh)
}


long hienthims(int1 i)
{
   //Ham nay dung de hien thi thoi gian tu luc set_timer(1)
   //neu ham la hienthims(0)thi bat dau bo dem lai tu dau
   //neu ham la hienthims(1)thi xuat thoi gian milisec
   if(i==0)
   {
      count=0;
      set_timer0(1);//dung lenh set_timer0(1)de dem lai tu dau
      return 0;
   }

   else
   {
      long val=get_timer0()*0.0213+3355.44*count;//T_ms=chuky thach anh*4*256=0.0512 ms(timer dem len 1 don vi mat 0.0512 ms)
      //O Pic 16F bo dem mac dinh 8 bit nen dem duoc 0.0512*256 thi set co tran,PIc 18F dem duoc 16Bit=0.0512*(2^16)duoc hon 3000ms thi tran
      return val;
   }
}

int docsensor(long mstimeout)
{
   hienthims(0);
   rsensor = 0;
   while(!kbhit(PORT2CBSA)&&(hienthims(1)<mstimeout))
   {
      
      ;
   }

   while ((rsensor == 0)&&(hienthims(1)<mstimeout))
   {
      rsensor = fgetc(PORT2CBSA);
      delay_us(10);
   }
   if (rsensor !=0) return rsensor;
   else return 0; // doc lu lieu bi loi 
}

void get_http()
{
   answer=0;
   mag="AT+HTTPINIT";
   result="OK";
   answer=sendATcommand(mag,result,5000);

   if(answer==1)

   {
      mag="AT+HTTPPARA=\"CID\",1";
      result="OK";
      answer=sendATcommand(mag,result,5000);

      if(answer==1)
      {
     
         //rsensor=docsensor(5000);
        // fprintf(PORT1SIM,"AT+HTTPPARA=\"URL\",\"http://height-increase.info/getdata.php?nhietdo=27&doam=666");  
        fprintf(PORT1SIM,"AT+HTTPPARA=\"URL\",\"http://tamphuc.16mb.com/getdata.php?nhietdo=%.1f&doam=%.1f&ngay=%u&thang=%u&gio=%u&phut=%u&nguon=33&cb1=233&cb2=313&cb3=21",nhietdo,doam,day,month,hrs,min); 
        
         mag="\"";
         result="OK";
         answer=sendATcommand(mag,result,5000);
         delay_ms(2000);
         mag="AT+HTTPACTION=0";
         result="+HTTPACTION:0,200";
         
         answer=sendATcommand(mag,result,10000);
         delay_ms(3000);
         if (answer == 1)
         {
         mag="AT+HTTPREAD";
         result="OK";
         answer=sendATcommand(mag,result,20000);
         delay_ms(2000);
          kiemtraread=1;
         }
      //   fprintf(PORT1SIM,"-----%s-----",buff);
     
       //  toInt = buff+1 ;// xoa 1 ky tu dau tien cua chuoi buff
   //      fprintf(PORT1SIM,"-----%s-----",toInt);
     //    x = atol(toInt); //chuyen chuoi so sang so
       //  if (x!=0){
      //      output_d(ma_led_7seg[x]);}
    //     fprintf(PORT1SIM,"-x:---%u-----",x);
      //   fputc(13,PORT1SIM);
   //       fputc(10,PORT1SIM);
         delay_ms(100);
        
      }
   }

   mag="AT+HTTPTERM";
   result="OK";
   answer=sendATcommand(mag,result,5000);
}

/*Het sim 900 */





//////////////////////
// CT DOC NHIET DO DO AM //


/**
  **********************************************************************************************
  * @file       dht22TP.c
  * @author     TamPhuc
  * @version    V1.0.0
  * @date       
  * @TomTat      Chuong trinh do nhie do, do am su dung DHT22
  *
  **********************************************************************************************
  * Chu Y      :
  *                      
  **********************************************************************************************
  */



#byte PORTA=0x05


  
#bit   DHT_DATA  = PORTA.3            //chan A.2  
#define  SET_PIN     set_tris_a 
#define DHT_ER      0 
#define DHT_OK      1 
#define DHT_ND      2 
#define DHT_ND1     3
#define DHT_DA      0
#define DHT_DA1      1

////////////////////
//
//    tra ve nhiet do float doctemp()//
///////////////////////

////////////////////
//
//    tra ve do am float dochuni()//
///////////////////////

/***********************************************************************************************
Chuc nang   :      Gui tin hieu do va doc gia tri tra ve cua DHT22
Tham so     :      select: Chon lua lay gia tri do am hay nhiet do
Tra ve      :      buffer: tra ve gia tri nhiet do, do am
                   DHT_ER: giao tiep voi DHT11 bi loi
                   DHT_OK: giao tiep tot voi DHT11
***********************************************************************************************/
unsigned char DHT_GetTemHumi (unsigned char select) 
{ 
    unsigned char buffer[5]={0,0,0,0,0}; 
    unsigned char ii,i,checksum; 
    
    SET_PIN(0x00);  // set la cong ra 
    DHT_DATA=1;
    delay_us(60);
    DHT_DATA = 0;
    delay_ms(18);
    DHT_DATA = 1; // it nhat 18ms 
    SET_PIN(0xff); //set la cong vao
    delay_us(40); 
    if(DHT_DATA==1)return DHT_ER ; 
    else while(DHT_DATA==0);    //Doi DaTa len 1 
    delay_us(60);       //60
    if(DHT_DATA==0)return DHT_ER; 
    else while((DHT_DATA==1));    //Doi Data ve 0  
    //delay_us(80);
    for(i=0;i<5;i++) 
    { 
        for(ii=0;ii<8;ii++) 
        {    
        while(DHT_DATA==0);//Doi Data len 1 !DHT_DATA
        delay_us(50); //50
        if(DHT_DATA==1) 
            { 
            buffer[i]|=(1<<(7-ii)); 
            while(DHT_DATA==1);//Doi Data xuong 0 
            } 
        } 
    } 
    //Tinh toan check sum 
    checksum=buffer[0]+buffer[1]+buffer[2]+buffer[3]; 
    //Kiem tra check sum 
    if((checksum)!=buffer[4])return DHT_ER; 
    //Lay du lieu 
      if (select==DHT_ND) 
      {    
            return(buffer[2]); 
      } 
      else if(select==DHT_ND1) 
      { 
            return(buffer[3]); 
      } 
      else if(select==DHT_DA) 
      { 
            return(buffer[0]); 
      } 
      else if(select==DHT_DA1) 
      { 
            return(buffer[1]); 
      } 
    return DHT_OK; 
    
} 

float doctemp()
{
float ND, ND1;
 ND= DHT_GetTemHumi (DHT_ND);
      delay_ms(400);
      ND1= DHT_GetTemHumi (DHT_ND1);
      delay_ms(400);
      ND=((ND*256)+ND1)/10;
      return ND;
 }
float dochuni()
{
float DA, DA1;
  DA= DHT_GetTemHumi  (DHT_DA);
      delay_ms(400);
      DA1= DHT_GetTemHumi  (DHT_DA1); 
      delay_ms(400);
      DA=((DA*256) + DA1)/10;
return DA;

}

//keT THUC CT DOC NHIET DO DO AM//
////////////////////////////////
///                          ///
/// Function Implementations ///
///                          ///
////////////////////////////////
                                                          


/*
Summary: Deletes a file.
Param: The full path of the file to delete.
Returns: None.
*/
void DeleteFile(char *fileName)
{
   printf("\r\nDeleting '%s': ", fileName);
   if(rm_file(fileName) != GOODEC)
   {
      printf("Error deleting file");
      return;
   }
   printf("OK");
}

/*
Summary: Creates a file.
Param: The full path of the file to create.
Returns: None.
Example Usage: \> make "Log.txt"
*/
void MakeFile(char *fileName)
{
  // printf("\r\nMaking file '%s': ", fileName);
   if(mk_file(fileName) != GOODEC)
   {
    //  printf("Error creating file");
      return;
   }
 //  printf("OK");                                
}

/*
Summary: Append a string to a file.
Param: The full path of the file to append to.
Param: A pointer to a string to append to the file.
Returns: None.
Example Usage: \> append "Log.txt" "This will be appended to the end of Log.txt"
Note: A "\r\n" will be appended after the appendString.
*/
void AppendFile(char *fileName, char *appendString)
{
   FILE stream;
//   printf("\r\nAppending '%s' to '%s': ", appendString, fileName);
   if(fatopen(fileName, "a", &stream) != GOODEC)
   {                   
      printf("Error opening file '%s'",fileName);
      return;
   }
   
   fatputs(appendString, &stream);
   fatputs("\r\n", &stream);
                                               
   if(fatclose(&stream) != GOODEC)
   {
      printf("Error closing file");
      return;
   }
 //  printf("OK");
}

/*
Summary: Change the working directory.
Param: The new working directory to switch to.
Returns: None.                              
Example Usage: \> cd ftp/     -> /ftp/
               \ftp\> cd files/  -> /ftp/files/
               \ftp\files> cd..  -> /ftp/
               \ftp\> cd ..      -> /
               \> cd /ftp/files/ -> /ftp/files/
               
Note: Changing the directory to .. will go up a directory.
*/
void ChangeDirectory(char *newCWD)
{
   FILE stream;
   
   //append a / to the end of the filename if it doesn't exist
   //making an assumption here that newCWD can hold 1 more character
   if (newCWD[strlen(newCWD)-1] != '/')
     strcat(newCWD, "/");

   if((strstr(newCWD, "../") != 0) && (strcmp(g_CWD, "/") != 0))
   {
      g_CWD[strlen(g_CWD) - 1] = '\0';
            
      g_CWD[strrchr(g_CWD, '/') - g_CWD + 1] = '\0';      
   }
   else
   {
      if(fatopen(newCWD, "r", &stream) != GOODEC)
      {
         printf("\r\nError changing directory");
         return;
      }
      strcpy(g_CWD, newCWD);
   }
}                               
                      
/*
Summary: Display the contents of the working directory.
Param: The full path of the directory contents to display.
Returns: None.
Example Usage: /> dir 
*/
void DisplayDirectory(char *dir)
{
   disp_folder_contents(dir);  
}

/*
Summary: Create a directory.
Param: The full path of the directory to create.
Returns: None.
Example Usage: /> mkdir "Backlog"
*/
void MakeDirectory(char *dir)
{
   //append a / to the end of the filename if it doesn't exist
   //making an assumption here that newCWD can hold 1 more character
   if (dir[strlen(dir)-1] != '/')
     strcat(dir, "/");   

   printf("\r\nMaking directory '%s': ", dir);
                         
   if(mk_dir(dir) != GOODEC)
   {
      printf("Error creating directory");
      return;
   }
   printf("OK");
}

/*
Summary: Remove a directory.
Param: The full path of the directory to remove.
Returns: None.
Example Usage: /> rmdir "Backlog"
Note: The directory needs to be empty in order for this command to work.
*/                                                              
void RemoveDirectory(char *dir)
{
   printf("\r\nRemoving directory '%s': ", dir);

   //append a / to the end of the filename if it doesn't exist
   //making an assumption here that newCWD can hold 1 more character                                                                      
   if (dir[strlen(dir)-1] != '/')
     strcat(dir, "/");

   if(rm_dir(dir) != GOODEC)
   {
      printf("Error removing directory");
      return;
   }
   printf("OK");
}

#define CAT_FROM_START  FALSE
#define CAT_FROM_END    TRUE
/*
Summary: Prints either all of or the last 80 characters in a file.
Param: The full path of the file to print off.
Param: If true, this function will print off the last 80 characters in the file.
       If false, this funciton will print off the entire file.
Returns: None.
Example Usage: /> cat "Logs.txt" (this will display the entire file)
Example Usage: /> tail "Logs.txt" (this will display the last 80 characters in the file)
*/
void PrintFile(char *fileName, int1 startFromEnd)
{
   FILE stream;

   if(fatopen(fileName, "r", &stream) != GOODEC)
   {
      printf("\r\nError opening file '%s'",fileName);  
      return;
   }

   printf("\r\n");

   if(startFromEnd)                                   
      fatseek(&stream, 80, SEEK_END);

   fatprintf(&stream); 
   
  // fatclose(&stream);
   if(fatclose(&stream) != GOODEC)
   {
      printf("Error closing file '%s'",fileName);
      return;
   }
}

/*
Summary: Formats the media to a specified size.
Param: The size of the media, in kB, in string form.
Returns: None.
Example Usage: /> format 524288 (format a 512MB card)
*/
void FormatMedia(char *mediaSize)
{
   int32 size;
   
   size = atoi32(mediaSize);
   
   printf("\r\nFormatting media (size=%LU): ", size);
  
   if(format(size) != GOODEC)                                              
   {
      printf("Error formatting media");
      return;
   }
   printf("OK");
}


char * GetCMD(char *in)
{
   char tokens[]=" \r\n";
   return(strtok(in,tokens));
}

char * GetOption(char *in)
{
   char tokensSpace[]=" \r\n";
   char tokensQuote[]="\"\r\n";
   
   //trim leading spaces
   while (*in==' ')
      in++;
   
   //if first char is a quote, then end token on a quote.  ELSE end token on a space
   if (*in == '\"')
      return(strtok(in,tokensQuote));
   else
      return(strtok(in,tokensSpace));
}
 
signed int tachdl(FILE* stream)
{
   signed int ch; // character read in

   // keep on printf any characters read in as long as we don't run into an end of file or a media error
   do
   {
      ch = fatgetc(stream);
      if (ch==60) //60 la ma thap phan cua <
      {
      fprintf(UART2,"chuoihttp?");
      //----
      answer=0;
   mag="AT+HTTPINIT";
   result="OK";
   answer=sendATcommand(mag,result,5000);

   if(answer==1)

   {
      mag="AT+HTTPPARA=\"CID\",1";
      result="OK";
      answer=sendATcommand(mag,result,5000);

      if(answer==1)
      {
     
         //rsensor=docsensor(5000);
        // fprintf(PORT1SIM,"AT+HTTPPARA=\"URL\",\"http://height-increase.info/getdata.php?nhietdo=27&doam=666");  
        fprintf(PORT1SIM,"AT+HTTPPARA=\"URL\",\"http://tamphuc.16mb.com/getdata.php?auto=0&nguon=88&cb1=77&cb2=66&cb3=55&"); 
      }
   }
        //--------
      }
      else  if (ch==62) // 62 la ma thap phan cua >
      {
      fprintf(UART2,"...endline");
         mag="\"";
         result="OK";
         answer=sendATcommand(mag,result,5000);
         delay_ms(2000);
         mag="AT+HTTPACTION=0";
         result="+HTTPACTION:0,200";
         
         answer=sendATcommand(mag,result,10000);
         delay_ms(3000);
         if (answer == 1)
         {
         mag="AT+HTTPREAD";
         result="OK";
         answer=sendATcommand(mag,result,20000);
         delay_ms(2000);
        //  kiemtraread=1;
         }
           mag="AT+HTTPTERM";
   result="OK";
   answer=sendATcommand(mag,result,5000);
      }
      else
      {
      fprintf(PORT1SIM,"%c", ch);
      }
   } while(ch != EOF);

   return ch;
}

void Printdl(char *fileName)
{
   FILE stream;

   if(fatopen(fileName, "r", &stream) != GOODEC)
   {
      printf("\r\nLoi mo file  '%s'",fileName);  
      return;
   }

   printf("\r\n");

   

   tachdl(&stream); 
   
  // fatclose(&stream);
   if(fatclose(&stream) != GOODEC)
   {
      printf("loi dong file '%s'",fileName);
      return;
   }
}
void ProcesaTime() {
   int8 i=0;
   int1 ChangeH, Changem, ChangeS;   
   int1 ChangeD, ChangeM, ChangeY;  

   ChangeH=0;
   Changem=0;
   ChangeS=0;   
   ChangeD=0;
   ChangeM=0;
   ChangeY=0; 

   while (i<CharRec) {
      if ((Buffer_time[i]=='h') || (Buffer_time[i]=='H')) {
         ChangeH=1;
         Changem=0;
         ChangeS=0;             
         Hour=0;
      }              
      if (Buffer_time[i]=='m') {
         Changem=1;
         ChangeH=0;
         ChangeS=0;
         Min=0;
      }
      if ((Buffer_time[i]=='s') || (Buffer_time[i]=='S')) {
         ChangeS=1;
         ChangeH=0;
         Changem=0;
         Sec=0;
      } 
      
      if ((Buffer_time[i]=='d') || (Buffer_time[i]=='D')) {
         ChangeD=1;
         ChangeM=0;
         ChangeY=0;
         Day=0;
      }  
      if (Buffer_time[i]=='M') {
         ChangeD=0;
         ChangeM=1;
         ChangeY=0;
         Mon=0;
      }
      if ((Buffer_time[i]=='y') || (Buffer_time[i]=='Y')) {
         ChangeD=0;
         ChangeM=0;
         ChangeY=1;
         Year=0;
      }
      
      if ((Buffer_time[i]>='0') && (Buffer_time[i]<='9')) {
         if (ChangeH)
            Hour=(Hour*10+Buffer_time[i]-48);
         if (Changem)                 
            Min=(Min*10+Buffer_time[i]-48);
         if (ChangeS)
            Sec=(Sec*10+Buffer_time[i]-48);
         if (ChangeD)
            Day=(Day*10+Buffer_time[i]-48); 
         if (ChangeM)
            Mon=(Mon*10+Buffer_time[i]-48); 
         if (ChangeY)
            Year=(Year*10+Buffer_time[i]-48); 
      }                                                       
      if ((Buffer_time[i]=='r') || (Buffer_time[i]=='R'))
         reset_cpu();
      i++;
   }                                                  
   printf("\r\nH=%u,m=%u,S=%u\r\nD=%u,M=%u,y=%u\r\n",Hour,Min,Sec,Day,Mon,Year); 
   ds1307_set_date_time(Day,Mon,Year,0,Hour,Min,Sec);      //Settime here
   CharRec=0;
   ComRec=0;
}
/* 
//Interupt cu dung de chinh thoi gian
#INT_RDA
void serial_isr()
{
   char c;

   c=getc();
   putchar(c);                                                              
   Buffer_time[CharRec] = c;
   if (c==13)                    
   {
      ComRec=1; 
      ProcesaTime();
   }
   else
      CharRec = (CharRec+1) % sizeof(Buffer_time);
} 
//Interupt cu dung de chinh thoi gian 
*/

void ghitxt()
{

 ds1307_get_date(day,month,yr,dow);                                                                                              
     ds1307_get_time(hrs,min,sec);
      sprintf(bufferTP,"<nhietdo=21&doam=99&"); 
   sprintf(buff_time,"gio=%02d&phut=\%02d&",hrs,min);
    strcat(bufferTP,buff_time);
    sprintf(buff_date,"ngay=%02d&thang=\%02d>",day,month); 
     strcat(bufferTP,buff_date);
   //  fprintf(UART2,"Chuoi Buffer %s: \n",bufferTP);
 //fprintf(UART2,"Ngay %u:%u:%u: \n",hrs,min,sec);
 //strcpy(gfilename,"/logx.txt");     
  //    strcpy(buffer,"Mualinhkien.vn-TAPH");
  sprintf(gfilename,"/log%02d-%02d.txt",day,month);
      MakeFile(gfilename); //tao file moi neu chua co
      AppendFile(gfilename,bufferTP);//Ghi du lieu vao file log.txt


}


void main(void)
{ 

ds1307_init();
//ds1307_set_date_time(10,1,17,5,0,53,00);

 int i;   // pointer to the buffer
  i = fat_init();
// delay_ms(1000); // cho on dinh de kiem tra the nho
 if (i)                                                          
   {            
      fprintf(UART2,"\r\n\nERROR INITIALIZING FAT\r\n\n");  
     
      return; 
   }                                                                               
   else              
   {                                                                   
      fprintf(UART2,"\r\n\nSUCCESS INITIALIZING FAT\r\n\n");   
                                                          
   }    
/*
   char *test;
   char buffer[255];  
   char buff_date[15]; 
   char buff_time[15]; 
   char gfilename[32]; 
   int i;   // pointer to the buffer               
  //   delay_ms(2000);       
      output_low(PIN_A1);
      ds1307_init(); 
   // initialize the FAT
   //  keep in mind that this will automagically initialize the media  
// Set date for -> 21/11/2014 fri
      // Set time for -> 14:34:00 
      ds1307_set_date_time(21,11,14,5,14,34,00);
 //  printf(lcd_putc, "\f");   
   while(TRUE)                                                        
   {    
   
     
   fprintf(UART2,"Kiem tra dang lap the nho vao hay khong:");
  i = fat_init();
 fprintf(UART2,"Da lap the nho:");
 fprintf(UART2,"Hi %u: \n",i);
 if (i)                                                          
   {            
      printf("\r\n\nERROR INITIALIZING FAT\r\n\n");  
     
      return; 
   }                                                                               
   else              
   {                                                                   
      printf("\r\n\nSUCCESS INITIALIZING FAT\r\n\n");   
                                                          
   }    
   
   */
   /*
  ds1307_get_date(day,month,yr,dow);                                                                                              
     ds1307_get_time(hrs,min,sec);
   sprintf(buffer,"<Chuoi Buffer dau tien>"); 
   sprintf(buff_time," - %02d:\%02d:\%02d",hrs,min,sec);
    strcat(buffer,buff_time);
    sprintf(buff_date," %02d/\%02d/\%02d ",day,month,yr); 
     strcat(buffer,buff_date);
     fprintf(UART2,"Chuoi Buffer %s: \n",buffer);
 //fprintf(UART2,"Ngay %u:%u:%u: \n",hrs,min,sec);
 strcpy(gfilename,"/logTP2.txt");     
  //    strcpy(buffer,"Mualinhkien.vn-TAPH");        
      MakeFile(gfilename); //tao file moi neu chua co
      AppendFile(gfilename,buffer);//Ghi du lieu vao file log.txt

*/
/*
PrintFile("/logTP2.txt", 0);
Printdl("/logTP2.txt");

    output_low(PIN_A1);
     
      delay_ms(1000);
      output_high(PIN_A1);
     
      delay_ms(1000);
      
   }    
   */
   
   //CHuong trinh o sim 900
   /*Cai dat ngat va timer*/
   enable_interrupts(INT_RDA);//cho phep ngat uart
   enable_interrupts(GLOBAL);//cho phep ngat toan cuc
   timer0_config();
   hienthims(0);
   output_low(PIN_A1); // Bat led 7 doan thu 1 tren kit
   
   delay_ms(10000);//Cho Module sim khoi dong,tam 5000ms
   mag="AT";
   result="OK";
   sendATcommand(mag,result,5000);
   fprintf(UART2,"AT\n");
   
   mag="AT+SAPBR=3,1,\"Contype\",\"GPRS\"";
   result="OK";
   sendATcommand(mag,result,5000);

   mag="AT+SAPBR=1,1";
   result="OK";
 //  sendATcommand(mag,result,5000);

   while(sendATcommand(mag,result,5000)==0)
   {
   
      fprintf(PORT1SIM,"AT+SAPBR=0,1");
      fputc(13,PORT1SIM);
      delay_ms(2000);
   }
   while(1)
   {
       output_high(PIN_A1);
     kiemtraread=0;
       delay_ms(1000);
        output_low(PIN_A1);
         mag="AT";
   result="OK";
        sendATcommand(mag,result,5000);
        nhietdo = doctemp();
        doam = dochuni();
        ghitxt();
        get_http();
        if(kiemtraread == 1)
        {
        fprintf(UART2,"Chuoi buff:%s\n",buff);
        toInt = buff+1;
        delay_ms(1000);
        fprintf(UART2,"Chuoi to int:%s\n",toInt);
         delay_ms(1000);
        fputc(13,UART2);
            
         ptr = strtok(toInt, ";");
        
         gg=0;
         while(ptr!=0) 
         {
            tachdata[gg] = atof(ptr);
             //puts(ptr);

            ptr = strtok(0, ";");
            gg++;
          }
          for (gg=0;gg<9;gg++)
{
   fprintf(UART2,"so thu %u: %.2f \n",gg+1,tachdata[gg]);
  
}
int ngaycapnhat = tachdata[1], thangcapnhat = tachdata[2];

 if(tachdata[0] == 1)
   {
   sprintf(gfileopen,"/log%02d-%02d.txt",ngaycapnhat,thangcapnhat);
   Printdl(gfileopen);
   }
        }
      //  fprintf(UART2,"AT\n");
   }
}
                                                                                                                                                         



